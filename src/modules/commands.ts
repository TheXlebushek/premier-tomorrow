import { VERSION, bot, gameList, reminder } from './bot';

console.log('Setting commands');

bot.command('start', (ctx) => ctx.reply('–•—ç–ª–æ'));

bot.command('help', (ctx) => {
    let help = '';
    help += '/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
    help += '/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä\n';
    help += '/info [keys] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–µ–±–∞–≥–∞\n';
    help += '/setupReminder - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–µ–º –ø—Ä–µ–º—å–µ—Ä–µ\n';
    help += '/removeReminder - –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–µ–º –ø—Ä–µ–º—å–µ—Ä–µ\n';
    help += '\n';
    help += '–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –∫–æ–≥–¥–∞ –ø—Ä–µ–º—å–µ—Ä\n';
    help += '–ê –µ—â–µ —Ç—ã –º–æ–∂–µ—à—å –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫. –î–µ—Ä–∂–∏: üé≤\n';
    ctx.reply(help, { reply_to_message_id: ctx.msg.message_id });
});

bot.command('info', async (ctx) => {
    let args: string[] = ctx.message?.text.split(' ')!;
    args.shift();
    if (!args.length) args = ['userId', 'chatId', 'bot', 'version'];
    let info = '';
    let error = '';
    let usedArgs: string[] = [];
    for (const key of args) {
        if (usedArgs.has(key)) continue;
        switch (key) {
            case 'userId':
                info += `User id: ${ctx.from?.id}\n`;
                break;
            case 'chatId':
                info += `Chat id: ${ctx.chat.id}\n`;
                break;
            case key.match(/bot/)?.input:
                if (!ctx.config.isDeveloper) break;
                info += `Bot: ${JSON.stringify(
                    await bot.api.getMe(),
                    null,
                    2
                )}\n`;
                break;
            case 'version':
                info += `Version: ${VERSION}\n`;
                break;
            default:
                error += `"${key}", `;
                break;
        }
        usedArgs.push(key);
    }
    if (error) error = '[Error]: Could not resolve ' + error;
    ctx.reply(info + error, { reply_to_message_id: ctx.msg.message_id });
});

bot.command('schedule', (ctx) => {
    let schedule = '';
    let now = new Date();
    gameList.get().forEach((game) => {
        schedule += game.date < now ? '<s>' : '';
        schedule += `${game.date.toNormalString()} - ${game.map}`;
        schedule += game.date < now ? '</s>' : '';
        schedule += '\n';
    });
    ctx.reply(schedule, {
        reply_to_message_id: ctx.msg.message_id,
        parse_mode: 'HTML',
    });
});

bot.command('setupReminder', (ctx) => {
    let replyString = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã';
    if (reminder.addChatToReminders(ctx.chat.id))
        replyString = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã';
    ctx.reply(replyString, {
        reply_to_message_id: ctx.msg.message_id,
    });
});

bot.command('removeReminder', (ctx) => {
    let replyString = '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å';
    if (reminder.removeChatFromReminder(ctx.chat.id))
        replyString = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã';
    ctx.reply(replyString, { reply_to_message_id: ctx.msg.message_id });
});

bot.command('remindersList', (ctx) => {
    ctx.reply(JSON.stringify(reminder.get()));
});

bot.hears(['–ü—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç', 'Hello', 'hello', '–•—ç–ª–æ', '—Ö—ç–ª–æ'], (ctx) =>
    ctx.reply('–•—ç–ª–æ')
);
